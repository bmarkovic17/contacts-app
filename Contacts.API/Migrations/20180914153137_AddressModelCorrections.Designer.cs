// <auto-generated />
using System;
using Contacts.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Contacts.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180914153137_AddressModelCorrections")]
    partial class AddressModelCorrections
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Contacts.API.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AddressId");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasName("AddressIdIDX");

                    b.ToTable("Address");

                    b.HasData(
                        new { AddressId = 1, AddressNumber = "8106", City = "Schenectady", Country = "New York, US", Postcode = "12302", Street = "Linda Ave." },
                        new { AddressId = 2, AddressNumber = "7201", City = "Easton", Country = "Pennsylvania, US", Postcode = "18042", Street = "N. Roehampton Ave." },
                        new { AddressId = 3, AddressNumber = "57", City = "Bern", Country = "Switzerland", Postcode = "3027", Street = "Erlenweg" },
                        new { AddressId = 4, AddressNumber = "110", City = "Greenville", Country = "South Carolina, US", Postcode = "29607", Street = "Pooh Bear Lane" },
                        new { AddressId = 5, AddressNumber = "3357", City = "Schenectady", Country = "New York, US", Postcode = "12303", Street = "Golden Ridge Road" },
                        new { AddressId = 6, AddressNumber = "2948", City = "Southfield", Country = "Michigan, US", Postcode = "48075", Street = "Tuna Street" },
                        new { AddressId = 7, AddressNumber = "4597", City = "Fort Lauderdale", Country = "Florida, US", Postcode = "33308", Street = "Pointe Lane" },
                        new { AddressId = 8, AddressNumber = "2382", City = "Baton Rouge", Country = "Louisiana, US", Postcode = "70814", Street = "Eva Pearl Street" }
                    );
                });

            modelBuilder.Entity("Contacts.API.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("ContactId");

                    b.HasIndex("AddressId")
                        .HasName("AddressIdIDX");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasName("ContactIdIDX");

                    b.HasIndex("Name")
                        .HasName("ContactNameIDX");

                    b.HasIndex("Surname")
                        .HasName("ContactSurnameIDX");

                    b.ToTable("Contacts");

                    b.HasData(
                        new { ContactId = 1, AddressId = 1, DateOfBirth = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Keanu", Surname = "Reeves" },
                        new { ContactId = 2, AddressId = 2, DateOfBirth = new DateTime(1971, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Elon", Surname = "Musk" },
                        new { ContactId = 3, AddressId = 3, DateOfBirth = new DateTime(1981, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Roger", Surname = "Federer" },
                        new { ContactId = 4, AddressId = 4, DateOfBirth = new DateTime(1971, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Mark", Surname = "Wahlberg" },
                        new { ContactId = 5, AddressId = 5, Surname = "Superman" },
                        new { ContactId = 6, AddressId = 6, DateOfBirth = new DateTime(1980, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Venus", Surname = "Williams" },
                        new { ContactId = 7, AddressId = 7, DateOfBirth = new DateTime(1981, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Serena", Surname = "Williams" },
                        new { ContactId = 8, AddressId = 7, DateOfBirth = new DateTime(1955, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Bill", Surname = "Gates" }
                    );
                });

            modelBuilder.Entity("Contacts.API.Models.ContactData", b =>
                {
                    b.Property<int>("ContactDataId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactDataStatus")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("ContactDataType")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ContactDataValue")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ContactId");

                    b.HasKey("ContactDataId");

                    b.HasAlternateKey("ContactId", "ContactDataType", "ContactDataValue");

                    b.HasIndex("ContactDataId")
                        .IsUnique()
                        .HasName("ContactDataIdIDX");

                    b.HasIndex("ContactId")
                        .HasName("ContactIdIDX");

                    b.ToTable("ContactData");

                    b.HasData(
                        new { ContactDataId = 1, ContactDataStatus = "Y", ContactDataType = "PHONE", ContactDataValue = "090/0000-000", ContactId = 1 },
                        new { ContactDataId = 2, ContactDataStatus = "Y", ContactDataType = "PHONE", ContactDataValue = "090/0000-001", ContactId = 1 },
                        new { ContactDataId = 3, ContactDataStatus = "Y", ContactDataType = "MAIL", ContactDataValue = "keanu.reeves@mail.com", ContactId = 1 },
                        new { ContactDataId = 4, ContactDataStatus = "Y", ContactDataType = "PHONE", ContactDataValue = "090/0000-100", ContactId = 2 },
                        new { ContactDataId = 5, ContactDataStatus = "Y", ContactDataType = "MAIL", ContactDataValue = "elon.musk@mail.com", ContactId = 2 },
                        new { ContactDataId = 6, ContactDataStatus = "Y", ContactDataType = "MAIL", ContactDataValue = "elon.musk@anothermail.com", ContactId = 2 },
                        new { ContactDataId = 7, ContactDataStatus = "Y", ContactDataType = "PHONE", ContactDataValue = "090/0000-200", ContactId = 3 },
                        new { ContactDataId = 8, ContactDataStatus = "Y", ContactDataType = "MAIL", ContactDataValue = "mark.wahlberg@mail.com", ContactId = 4 },
                        new { ContactDataId = 9, ContactDataStatus = "Y", ContactDataType = "MAIL", ContactDataValue = "superman@mail.com", ContactId = 5 },
                        new { ContactDataId = 10, ContactDataStatus = "Y", ContactDataType = "PHONE", ContactDataValue = "090/0000-002", ContactId = 5 },
                        new { ContactDataId = 11, ContactDataStatus = "Y", ContactDataType = "PHONE", ContactDataValue = "090/0000-333", ContactId = 6 },
                        new { ContactDataId = 12, ContactDataStatus = "Y", ContactDataType = "MAIL", ContactDataValue = "venus.williams@anothermail.com", ContactId = 6 },
                        new { ContactDataId = 13, ContactDataStatus = "Y", ContactDataType = "MAIL", ContactDataValue = "serena.williams@anothermail.com", ContactId = 7 },
                        new { ContactDataId = 14, ContactDataStatus = "Y", ContactDataType = "PHONE", ContactDataValue = "090/1000-100", ContactId = 8 },
                        new { ContactDataId = 15, ContactDataStatus = "Y", ContactDataType = "MAIL", ContactDataValue = "bill.gates@mail.com", ContactId = 8 }
                    );
                });

            modelBuilder.Entity("Contacts.API.Models.ContactTag", b =>
                {
                    b.Property<int>("ContactTagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId");

                    b.Property<string>("ContactTagName")
                        .IsRequired();

                    b.HasKey("ContactTagId");

                    b.HasAlternateKey("ContactId", "ContactTagName");

                    b.HasIndex("ContactId")
                        .HasName("ContactIdIDX");

                    b.HasIndex("ContactTagId")
                        .IsUnique()
                        .HasName("ContactTagIdIDX");

                    b.HasIndex("ContactTagName")
                        .HasName("ContactTagNameIDX");

                    b.ToTable("ContactTag");

                    b.HasData(
                        new { ContactTagId = 1, ContactId = 1, ContactTagName = "friend" },
                        new { ContactTagId = 2, ContactId = 2, ContactTagName = "roleModel" },
                        new { ContactTagId = 3, ContactId = 2, ContactTagName = "colleague" },
                        new { ContactTagId = 4, ContactId = 3, ContactTagName = "family" },
                        new { ContactTagId = 5, ContactId = 4, ContactTagName = "friend" },
                        new { ContactTagId = 6, ContactId = 5, ContactTagName = "friend" },
                        new { ContactTagId = 7, ContactId = 8, ContactTagName = "friend" },
                        new { ContactTagId = 8, ContactId = 8, ContactTagName = "business" }
                    );
                });

            modelBuilder.Entity("Contacts.API.Models.Contact", b =>
                {
                    b.HasOne("Contacts.API.Models.Address", "Address")
                        .WithMany("Contacts")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Contacts.API.Models.ContactData", b =>
                {
                    b.HasOne("Contacts.API.Models.Contact", "Contact")
                        .WithMany("ContactData")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Contacts.API.Models.ContactTag", b =>
                {
                    b.HasOne("Contacts.API.Models.Contact", "Contact")
                        .WithMany("ContactTags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
