// <auto-generated />
using System;
using Contacts.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Contacts.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180908152119_ContactDataWSeed")]
    partial class ContactDataWSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Contacts.API.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new { ContactId = 1, Address = "8106 Linda Ave., Schenectady, NY 12302", DateOfBirth = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Keanu", Surname = "Reeves" },
                        new { ContactId = 2, Address = "7201 N. Roehampton Ave., Easton, PA 18042", DateOfBirth = new DateTime(1971, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Elon", Surname = "Musk" },
                        new { ContactId = 3, Address = "Erlenweg 57, 3027 Bern, Switzerland", DateOfBirth = new DateTime(1981, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Roger", Surname = "Federer" }
                    );
                });

            modelBuilder.Entity("Contacts.API.Models.ContactData", b =>
                {
                    b.Property<int>("ContactDataID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactDataType")
                        .IsRequired();

                    b.Property<string>("ContactDataValue")
                        .IsRequired();

                    b.Property<int>("ContactId");

                    b.HasKey("ContactDataID");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactData");

                    b.HasData(
                        new { ContactDataID = 1, ContactDataType = "PHONE", ContactDataValue = "090/0000-000", ContactId = 1 },
                        new { ContactDataID = 2, ContactDataType = "PHONE", ContactDataValue = "090/0000-001", ContactId = 1 },
                        new { ContactDataID = 3, ContactDataType = "MAIL", ContactDataValue = "keanu.reeves@mail.com", ContactId = 1 },
                        new { ContactDataID = 4, ContactDataType = "PHONE", ContactDataValue = "090/0000-100", ContactId = 2 },
                        new { ContactDataID = 5, ContactDataType = "MAIL", ContactDataValue = "elon.musk@mail.com", ContactId = 2 },
                        new { ContactDataID = 6, ContactDataType = "MAIL", ContactDataValue = "elon.musk@anothermail.com", ContactId = 2 },
                        new { ContactDataID = 7, ContactDataType = "PHONE", ContactDataValue = "090/0000-200", ContactId = 3 }
                    );
                });

            modelBuilder.Entity("Contacts.API.Models.ContactData", b =>
                {
                    b.HasOne("Contacts.API.Models.Contact", "Contact")
                        .WithMany("ContactData")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
